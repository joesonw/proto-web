// Code generated by protoc-gen-pw-http-server. DO NOT EDIT.
package pbgo

import (
	context "context"
	fmt "fmt"
	protoweb "github.com/joesonw/proto-web/pkg/protoweb"
	httprouter "github.com/julienschmidt/httprouter"
	grpc "google.golang.org/grpc"
	protojson "google.golang.org/protobuf/encoding/protojson"
	ioutil "io/ioutil"
	http "net/http"
	strconv "strconv"
)

func RegisterExampleHTTPServer(s protoweb.ServiceRegistrar, srv ExampleServer) {
	s.RegisterService(&Example_HttpServiceDesc, srv)
}
func _Example_Unary_HttpHandler(srv interface{}, w http.ResponseWriter, r *http.Request, params httprouter.Params, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	var err error
	ctx := r.Context()
	req := &Unary_Request{}
	b, err := ioutil.ReadAll(r.Body)
	_ = r.Body.Close()
	if err != nil {
		return nil, err
	}
	if err := (protojson.UnmarshalOptions{}).Unmarshal(b, req); err != nil {
		return nil, err
	}
	x1, err := strconv.ParseInt(params.ByName("id"), 10, 64)
	req.Id = int32(x1)
	if err != nil {
		return nil, err
	}
	req.Extra = r.URL.Query().Get("extra")
	var res *Unary_Response
	if interceptor != nil {
		res, err = srv.(ExampleServer).Unary(ctx, req)
	} else {
		info := &grpc.UnaryServerInfo{
			Server:     srv,
			FullMethod: "errors.Example.Unary",
		}

		handler := func(ctx context.Context, in interface{}) (interface{}, error) {
			return srv.(ExampleServer).Unary(ctx, in.(*Unary_Request))
		}
		var resp interface{}
		resp, err = interceptor(ctx, req, info, handler)
		res = resp.(*Unary_Response)
	}
	w.Header().Set("test", fmt.Sprintf("%v", res.TestHeader))
	res.TestHeader = 0
	return res, nil
}

var Example_HttpServiceDesc = protoweb.ServiceDesc{
	ServiceName: "errors.Example",
	HandlerType: (*ExampleServer)(nil),
	Methods: []protoweb.MethodDesc{
		{
			MethodName: "Unary",
			Path:       "/unary_echo/:id",
			HttpMethod: "POST",
			Handler:    _Example_Unary_HttpHandler,
		},
	},
	Streams: []protoweb.StreamDesc{
		{
			StreamName:    "StreamResponse",
			Path:          "/stream_response",
			Handler:       _Example_StreamResponse_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamRequest",
			Path:          "/stream_request",
			Handler:       _Example_StreamRequest_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamDuplex",
			Path:          "/stream_duplex",
			Handler:       _Example_StreamDuplex_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "server.proto",
}
